extends RigidBody

class_name SeVeCar

#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
var TorqueScale:float = 0.75 # keep it this way

#gameplay
export var UseMouseSteering = false # Use Mouse Steering
export var SteeringAssistance:float = 1.0 # Auto Counter-Steer Rate
export var SteeringAssistanceAngular:float = 0.2 # Auto Counter-Steer Rate (AngularVelocity-based)
export var MouseSteerDeadzone:float = 0.0 # Mouse Steer Deadzone
export var MouseSteerSensitivity:float = 1.0 # Mouse Steer Sensitivity
export var MouseSteeringLinearity:float = 100.0 # Mouse Steer Linearity
export var KeyboardSteerSpeed:float = 0.03 # Steering Rate
export var KeyboardReturnSpeed:float = 0.05 # Steering Return Rate
export var KeyboardSteerDecay:float = 0.025 # Steering rate decaying under car's velocity
export var KeyboardReturnDecay:float = 0.025 # Steering return rate decaying under car's velocity
export var KeyboardSteerAmountDecay:float = 0.075 # Understeer Prevention
export var NoStall = false # Prevents engine from going under 100 RPM
export var GearAssistant = [20,2,0.944087,6000,5500] # Shift delay | Level (0 - 2) | Speed Influence (will be automatically set) | Downshift RPM Influence | Upshift RPM Influence

export var GasSpeed = [0.25,0.25] # Release, Press
export var BrakeSpeed = [0.1,0.05] # Release, Press
export var HandBrakeSpeed = [0.25,0.25] # Release, Press
export var ClutchSpeed = [0.25,0.25] # Release, Press

#stability
export var ABS:PoolRealArray = [0.04, 0.0, 5.0, 0.7, 1, 1] # Sensitivity | Sensitivity Threshold | Disable Speed | Threshold Brake | Enabled | Low-Tech Enabled (all first 3 items ignored)

#experimental
export var ESP = [1, 0.5, 0] # Sensitivity | Threshold | Enabled
export var TCS = [0.05, 0.5, 0] # Sensitivity | Threshold | Enabled

#TUNING

#transmission
export var TransmissionType:int = 0 # 0 = Full Manual, 1 = Sequential
export var ClutchGrip:float = 0.75 # Grip between the engine and the driveshaft.
export var FinalDriveRatio:float = 4.25
export var GearRatios = [ 3.250, 1.894, 1.259, 0.937, 0.771 ] # Add an extra item to extend gears.
export var ReverseRatio:float = 3.153
export var RatioMult:float = 9.5 # FinalDriveRatio multiplier to find accuracy.
export var ShiftClutchOff:float = 0.75

#power-to-wheel
export var PowerToWheel:float = 0.9 # Amount of torque being sent to the wheels upon higher gear ratio. (Keep untouched recommended)
export var DriveShaftGrip:float = 0.75 # Grip between the wheels and the driveshaft. (Must be matched to ClutchGrip in most cases)
export var BiteStrength:float = 3.0 # i forgor

# Needed to keep the powertrain from spazzing. But could sometimes be pretty messy to find balance between horrible sense of acceleration and instability.
export var ClutchStability:float = 0.5
export var StabilityThreshold:float = 150.0
export var StabiliseGears:float = 0.15

#diff (EXPERIMENTAL)
export var Locking:float = 8.0
export var Preload:float = 0.1
export var CoastPreload:float = 0.0

#engine
export var EngineWeight:float = 1.6 # Higher weight makes it more invulnerable to resistable forces but responds slowly.
export var MaxTorque:float = 10000.0 # Amount of torque can recieve before valve-float occurs.
export var TorqueDecline:float = 1.0 # Probability of valve-floating.
export var PotentialTorque:float = 0.049 # Basically a multiplier of the two above.
export var StartingTorque:float = 40.0 # Adds up extra torque to compensate at low RPMs.
export var CrossPoint:float = 5252.0 # Higher numbers makes the horsepower graph rise earlier. (just for measurements)
export var EngineFriction:float = 1.0 # Decreases rev.
export var EngineDrag:float = 5.0 # Decreases rev as it gets higher.
export var ThrottleResponse:float = 0.5 # Fuel injection rate. (range: 0-1)
export var RPMLimit:float = 7000.0
export var IdleRPM:float = 800.0
export var IdleThrottle:float = 0.1 # Throttle on idle RPM

export var RevBouncing = true # Enable realistic rev limiter
export var RevLimiterDelay:float = 5.0 # Redline bounce duration (Set to 0 to rev beyond RPM limit)

export var LaunchRPM:float = 0.0 # Set to 0 to disable.

#turbo
export var TurboInstalled = false # Enables turbo
export var TurboAmount = 1 # Turbo power multiplication.
export var MaxPSI:float = 8.0 # Maximum air generated by the turbo
export var EngineCompressionRatio:float = 9.0 # Piston travel distance
export var TurboSize:float = 8.0 # Higher = More turbo lag
export var Compressor:float = 0.14 # Higher = Allows more spooling on low RPM
export var SpoolThreshold:float = 0.1 # Range: 0 - 0.9999
export var BlowoffRate:float = 0.14 # Range: 0 - 1
export var TurboEfficiency:float = 0.06 # Range: 0 - 1
export var TurboVacuum:float = 1.0 # Torque deficiency upon idling turbo

export var BackfireRate:float = 3.0
export var BackfireThreshold:float = 0.9

#chassis
export var BrakeStrength:float = 100.0

#aero
export var Drag:float = 3.0/2.0
export var Downforce:float = 1.0
export var Pitching:float = -0.05
export var Tilting:float = 0.0
export var Yawing:float = 0.0

#----

onready var snd_spool:AudioStreamPlayer3D = $spool
onready var snd_blow:AudioStreamPlayer3D = $blow
onready var snd_skid:AudioStreamPlayer3D = $skid
onready var snd_dirt:AudioStreamPlayer3D = $dirt
onready var snd_engine:AudioStreamPlayer3D = $engine

#system
var visualisation = false
var wheels = 0
var reverseassistdelay:float = 0.0
var dsweight:float = 0.0
var dsweightrun:float = 0.0
var clutchon:float = 0.0
var rpm:float = 0.0
var feedback:float = 0.0
var gas:float = 0.0
var brake:float = 0.0
var handbrake:float = 0.0
var gear = 0
var steer:float = 0.0
var steer2:float = 0.0
var throttle:float = 0.0
var ratio = 1
var torquedrag = 1.0
var resistance:float = 0.0
var resistance2:float = 0.0
var limitdel:float = 0.0
var shiftdel:float = 0.0
var torquereadout:float = 0.0
var hpreadout:float = 0.0
var psi:float = 0.0
var pastpsi:float = 0.0
var vacuum:float = 0.0
var boosting:float = 0.0
var speedrpm:float = 0.0
var wheelsonground = 0
var onground = false
var brakethreshold:float = 0.0
var brakethresholdrun:float = 0.0

var currenttorque:float = 0.0

var tq:float = 0.0
var hp:float = 0.0

var gpedal = false
var bpedal = false
var cpedal = false
var hb = false
var sleft = false
var sright = false
var su = false
var sd = false

#misc
var cgroundmaterial:float = 0.0
var wheelsforce:float = 0.0

var absflashed = false
var tcsflashed = false
var espflashed = false
var backfiretriggered = false

var skidding:float = 0.0
var skidding2:float = 0.0
var wind = 0.0
var pastvelocity:float = 0.0
var gforce:float = 0.0

var blow_psi:float = 0.0
var blowvol:float = 0.0

#-------

func _ready() -> void:
#	if name == "abstest":
#		ABS[4] = 0
	
	# individual tyre settings
	get_node("fl").set("SteerAngle_Left",32.0)
	get_node("fl").set("SteerAngle_Right",29.0)
	get_node("fr").set("SteerAngle_Left",29.0)
	get_node("fr").set("SteerAngle_Right",32.0)

#	get_node("fl").set("SteerAngle_Left",50.0)
#	get_node("fl").set("SteerAngle_Right",50.0)
#	get_node("fr").set("SteerAngle_Left",0.0)
#	get_node("fr").set("SteerAngle_Right",0.0)
#	get_node("rl").set("SteerAngle_Left",50.0)
#	get_node("rl").set("SteerAngle_Right",50.0)

#	get_node("rl").set("tyre_code","0250-195-060-14-060")
#	get_node("rr").set("tyre_code","0250-195-060-14-060")
#	get_node("rl").refreshtyres()
#	get_node("rr").refreshtyres()
	
#	RPMLimit = 1239123.0

	get_node("fl").set("Differential_Connection","fr")
	get_node("fr").set("Differential_Connection","fl")
	get_node("rl").set("Differential_Connection","rr")
	get_node("rr").set("Differential_Connection","rl")

	get_node("fl").set("Connection",0.0)
	get_node("fr").set("Connection",0.0)
	get_node("rl").set("Connection",1.0)
	get_node("rr").set("Connection",1.0)

#	get_node("fl").set("Connection",0.0)
#	get_node("fr").set("Connection",0.0)
#	get_node("rl").set("Connection",1.0)
#	get_node("rr").set("Connection",1.0)

	get_node("fl").set("BrakeInfluence",1.0)
	get_node("fr").set("BrakeInfluence",1.0)
	get_node("rl").set("BrakeInfluence",0.5)
	get_node("rr").set("BrakeInfluence",0.5)

	get_node("fl").set("Rest",0.025)
	get_node("fr").set("Rest",0.025)
	get_node("rl").set("Rest",0.025)
	get_node("rr").set("Rest",0.025)

	get_node("fl").set("StrutOffset",0.15)
	get_node("fr").set("StrutOffset",0.15)
	get_node("rl").set("StrutOffset",0.15)
	get_node("rr").set("StrutOffset",0.15)

	get_node("fl").set("stiffness",475.0)
	get_node("fr").set("stiffness",475.0)
	get_node("rl").set("stiffness",375.0)
	get_node("rr").set("stiffness",375.0)

	get_node("fl").set("elasticity",10.0)
	get_node("fr").set("elasticity",10.0)
	get_node("rl").set("elasticity",10.5)
	get_node("rr").set("elasticity",10.5)

	get_node("fl").set("HandbrakeInfluence",0.0)
	get_node("fr").set("HandbrakeInfluence",0.0)
	get_node("rl").set("HandbrakeInfluence",1.0)
	get_node("rr").set("HandbrakeInfluence",1.0)

	get_node("fl").set("SwayBar_Connection","fr")
	get_node("fr").set("SwayBar_Connection","fl")
	get_node("rl").set("SwayBar_Connection","rr")
	get_node("rr").set("SwayBar_Connection","rl")

	get_node("fl").set("Differential_Connection","fr")
	get_node("fr").set("Differential_Connection","fl")
	get_node("rl").set("Differential_Connection","rr")
	get_node("rr").set("Differential_Connection","rl")
	#----------


func _physics_process(_delta):
	var mouseposx = get_viewport().get_mouse_position().x/get_viewport().size.x

	var assist = -(global_transform.basis.orthonormalized().xform_inv(linear_velocity).x/(linear_velocity.length() +1))*SteeringAssistance
	assist += global_transform.basis.orthonormalized().xform_inv(angular_velocity).y*SteeringAssistanceAngular
	
	sright = Input.is_action_pressed("right")
	sleft = Input.is_action_pressed("left")
	
	if Input.is_action_just_pressed("toggle_visualisation"):
		visualisation = not visualisation
	
	var siding = abs(global_transform.basis.orthonormalized().xform_inv(linear_velocity).x)
	var going = global_transform.basis.orthonormalized().xform_inv(linear_velocity).z/(siding +1)
	if going<0:
		going = 0
	if sleft:
		if steer2>0:
			steer2 += KeyboardSteerSpeed/(going*KeyboardSteerDecay +1)
		else:
			steer2 += KeyboardReturnSpeed/(going*KeyboardReturnDecay +1)
	elif sright:
		if steer2<0:
			steer2 -= KeyboardSteerSpeed/(going*KeyboardSteerDecay +1)
		else:
			steer2 -= KeyboardReturnSpeed/(going*KeyboardReturnDecay +1)
	else:
		if steer2>KeyboardReturnSpeed/(going*KeyboardReturnDecay +1):
			steer2 -= KeyboardReturnSpeed/(going*KeyboardReturnDecay +1)
		elif steer2<-KeyboardReturnSpeed/(going*KeyboardReturnDecay +1):
			steer2 += KeyboardReturnSpeed/(going*KeyboardReturnDecay +1)
		else:
			steer2 = 0
		
	var maxsteer = 1/(going*KeyboardSteerAmountDecay +1)
	
	steer2 = clamp(steer2, -maxsteer, maxsteer)
	
	steer = steer2 -assist
	
	if UseMouseSteering:            
		var stinfluence = (mouseposx-0.5)*(MouseSteerSensitivity*2)
		if stinfluence<0:
			stinfluence = -stinfluence
		
		stinfluence = min(stinfluence*MouseSteeringLinearity, 1.0)
		  
		steer = -((mouseposx-0.5)*stinfluence)*(MouseSteerSensitivity*2)  -assist
	
	steer = clamp(steer, -1.0, 1.0)
	
	aerodynamics()
	
	currenttorque = (rpm - (rpm * (rpm * TorqueDecline)) / MaxTorque) * PotentialTorque + StartingTorque
	if currenttorque<0.0:
		currenttorque = 0.0
	
	if TurboInstalled:
		var yes = clamp((pastpsi - psi) * BackfireRate, 0.0, 1.0)
		pastpsi = psi
		
		var radomed = rand_range(0.0,yes)
		if radomed>BackfireThreshold:
			backfiretriggered = true
		
		var thr = (throttle-SpoolThreshold)/(1.0-SpoolThreshold)
		
		if boosting>thr:
			boosting = thr
		else:
			boosting -= (boosting - thr)*TurboEfficiency
		
		psi += (boosting*rpm)/((TurboSize/Compressor)*60.9)
		psi -= psi*BlowoffRate
		psi = clamp(psi, -TurboVacuum, MaxPSI)
		
		currenttorque += ( (psi*TurboAmount) * (EngineCompressionRatio*0.609))
	
	tq = (currenttorque -rpm*(EngineDrag/1000.0) -EngineFriction)*TorqueScale
	hp = (rpm/CrossPoint)*tq
	
	if gear>0:
		ratio = (GearRatios[gear-1]*FinalDriveRatio)*RatioMult
	else:
		ratio = -(ReverseRatio*FinalDriveRatio)*RatioMult
	
	var ra = abs(ratio)
	
	var assistshiftspeed = (GearAssistant[3]/ra)*GearAssistant[2]
	var assistdownshiftspeed = (GearAssistant[4]/abs((GearRatios[gear-2]*FinalDriveRatio)*RatioMult))*GearAssistant[2]
	torquedrag = (PowerToWheel/10.0)*ra
	
	gpedal = false
	bpedal = false
	cpedal = false
	hb = false
	
	if UseMouseSteering:
		if GearAssistant[1]<2:
			su = Input.is_action_just_pressed("shiftup_mouse")
			sd = Input.is_action_just_pressed("shiftdown_mouse")
		else:
			su = false
			sd = false
		
		gpedal = Input.is_action_pressed("gas_mouse")
		bpedal = Input.is_action_pressed("brake_mouse")
		cpedal = Input.is_action_pressed("clutch_mouse")
		hb = Input.is_action_pressed("handbrake_mouse")
	else:
		if GearAssistant[1]<2:
			su = Input.is_action_just_pressed("shiftup")
			sd = Input.is_action_just_pressed("shiftdown")
		else:
			su = false
			sd = false
		
		gpedal = Input.is_action_pressed("gas")
		bpedal = Input.is_action_pressed("brake")
		cpedal = Input.is_action_pressed("clutch")
		hb = Input.is_action_pressed("handbrake")
	
	if GearAssistant[1] == 2:
		if gpedal and gear == 0:
			gear = 1
		elif bpedal and gear == 0:
			gear = -1
		if linear_velocity.length()<1:
			if gear == -1 and gpedal or gear>0 and bpedal or not bpedal and not gpedal:
				gear = 0
		if gear>0:
			if linear_velocity.length()>assistshiftspeed/2.0:
				su = true
			elif linear_velocity.length()<assistdownshiftspeed/2.0 and gear>1:
				sd = true
		
		if gear == -1:
			var interferance = gpedal
			gpedal = bpedal
			bpedal = interferance
	
	
	if gear<len(GearRatios):
		if su and clutchon<ShiftClutchOff or su and GearAssistant[1]>0 or su and TransmissionType == 1:
			if GearAssistant[1]>0 and not gear<1:
				shiftdel = GearAssistant[0]
			gear += 1
	if gear>-1:
		if sd and clutchon<ShiftClutchOff or sd and GearAssistant[1]>0 or sd and TransmissionType == 1:
			gear -= 1
	
	
	if gpedal and shiftdel<0:
		gas += GasSpeed[1]
	else:
		gas -= GasSpeed[0]
	
	if bpedal:
		brake += BrakeSpeed[1]
	else:
		brake -= BrakeSpeed[0]
	
	if hb:
		handbrake += HandBrakeSpeed[1]
	else:
		handbrake -= HandBrakeSpeed[0]
	
	shiftdel -= 1
		
	if cpedal or shiftdel>0 and GearAssistant[1]>0 or GearAssistant[1]>0 and rpm<2000:
		clutchon -= ClutchSpeed[1]
	else:
		clutchon += ClutchSpeed[0]
	
	gas = clamp(gas, 0.0, 1.0)
	brake = clamp(brake, 0.0, 1.0)
	handbrake = clamp(handbrake, 0.0, 1.0)
	clutchon = clamp(clutchon, 0.0, 1.0)
	
	if rpm>RPMLimit and RevBouncing or rpm>LaunchRPM and not LaunchRPM == 0.0 and gear == 0:
		limitdel = RevLimiterDelay
	
	limitdel -= 1
	
	if limitdel<0:
		if throttle<gas:
			throttle -= (throttle - gas)*ThrottleResponse
		else:
			throttle = gas
		
		if rpm<IdleRPM:
			if throttle<IdleThrottle:
				throttle = IdleThrottle
	else:
		throttle = 0.0
	
	var engine_weight_mult:float = EngineWeight / 1.6
	
	rpm += resistance/engine_weight_mult
	
	var engine_friction_weight:float = EngineFriction / (EngineWeight / 1.6)
	
	if rpm > engine_friction_weight:
		rpm -= engine_friction_weight
	elif rpm < -engine_friction_weight:
		rpm += engine_friction_weight
	else:
		rpm = 0.0
	
	speedrpm += resistance2
	resistance = 0.0
	resistance2 = 0.0
	
	rpm += (((currenttorque * 2.0) * throttle) / engine_weight_mult)
	
	rpm = rpm / ((EngineDrag / engine_weight_mult) / 1000.0 +1)
	
	if NoStall and rpm<100:
		rpm = 100
	if rpm>RPMLimit and not RevBouncing:
		rpm = RPMLimit
	
	dsweightrun = dsweight
	
#	print(dsweightrun)
	
	dsweight = 0.0
	
	#misc
	var soundvolume = 1.0
	
	snd_engine.pitch_scale = abs(rpm)/5430.0
	snd_engine.unit_db = linear2db((throttle*0.5 +0.5)*soundvolume)
	snd_engine.max_db = snd_engine.unit_db
	
	var skikd = clamp(skidding2/25.0 -0.5, 0.0, 1.0)
	
	if wheelsonground>0:
		cgroundmaterial /= float(wheelsonground)
		wheelsforce = min(wheelsforce / float(wheelsonground), 100.0)
		
		snd_skid.pitch_scale = 0.7 +skikd*0.25
		snd_skid.unit_db = linear2db(((skikd/1.5)*(1.0-cgroundmaterial))*soundvolume)
		snd_dirt.unit_db = linear2db(((wheelsforce/100.0)*cgroundmaterial)*soundvolume)
		snd_dirt.pitch_scale = 1.0 +wheelsforce/100.0
	else:
		snd_skid.unit_db = linear2db(0)
		snd_dirt.unit_db = linear2db(0)
	
	snd_skid.max_db = snd_skid.unit_db
	snd_dirt.max_db = snd_dirt.unit_db
	
	skidding = 0.0
	skidding2 = 0.0	
	
	cgroundmaterial = 0.0
	wheels = 0
	wheelsonground = 0
	wheelsforce = 0.0
	
	brakethreshold = clamp(brakethreshold, 0.0, 1.0)
	
	brakethresholdrun = brakethreshold
	
#	print(brakethresholdrun)
	
	brakethreshold = 0.0
	
	gforce = (linear_velocity.length() - pastvelocity)*((0.30592/9.8)*120.0)
	pastvelocity = linear_velocity.length()
	
	var turbovolume = 0.2
	
	blowvol = clamp(blow_psi - psi, 0.0, 1.0)
	blow_psi = psi
	
	var spoolvol = clamp(psi/10.0, 0.0, 1.0)
	
	snd_blow.unit_db = linear2db((blowvol*turbovolume)*soundvolume)
	snd_spool.unit_db = linear2db(((spoolvol*1.5)*turbovolume)*soundvolume)
	snd_spool.pitch_scale = 0.8 +spoolvol*0.5
	
	snd_blow.max_db = snd_blow.unit_db
	snd_spool.max_db = snd_spool.unit_db


func aerodynamics() -> void:
	wind = global_transform.basis.orthonormalized().xform_inv(get_linear_velocity()) / 60.0
	
	add_central_force(Vector3(global_transform.basis.orthonormalized().xform(Vector3(-(wind.x * Drag) * 60.0, -wind.z * Downforce -wind.y * Drag, -(wind.z * Drag) * 60.0))))

func sounds() -> void:
	pass
